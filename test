#!/usr/bin/env python
"""
    globifest/test - globifest Test Suite

    Copyright 2018, Daniel Kristensen, Garmin Ltd, or its subsidiaries.
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, this
      list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
      this list of conditions and the following disclaimer in the documentation
      and/or other materials provided with the distribution.

    * Neither the name of the copyright holder nor the names of its
      contributors may be used to endorse or promote products derived from
      this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
    DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
    SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

import re
import sys
import time
import types
import unittest

from GlobifestLib import Log

import Globitest
#pylint: disable=W0401
from Globitest import *

def add_tests_by_expressions(expressions, test_ref_list):
    """Add tests by matching expressions"""
    #pylint: disable=W0123
    for expr_text in expressions:
        expr = re.compile(expr_text)
        for test_ref in test_ref_list:
            if expr.match(test_ref["desc"]):
                # Must instantiate the class before adding
                key = test_ref["desc"]
                if not hasattr(test_inst, key):
                    obj = eval("{}(methodName='{}')".format(test_ref["cname"], test_ref["fname"]))
                    test_inst[key] = obj
                suite.addTest(test_inst[key])

def get_tests():
    """
        Return a list of test classes in the Globitest namespace
    """
    #pylint: disable=W0123
    class_list = []
    for module_name in dir(Globitest):
        module_inst = eval("Globitest.{}".format(module_name))
        if not isinstance(module_inst, types.ModuleType):
            continue

        for class_name in dir(module_inst):
            class_inst = eval("Globitest.{}.{}".format(module_name, class_name))
            if not isinstance(class_inst, type):
                continue

            if not issubclass(class_inst, unittest.TestCase):
                continue

            for func_name in dir(class_inst):
                func_inst = eval("Globitest.{}.{}.{}".format(module_name, class_name, func_name))
                if not isinstance(func_inst, types.FunctionType):
                    continue

                if not func_name.startswith("test"):
                    continue

                class_list.append(dict(
                    desc="{}.{}".format(class_name, func_name),
                    cname="Globitest.{}.{}".format(module_name, class_name),
                    fname=func_name
                    ))
    return class_list


def get_test_result(passed):
    """Convert the test result to a string"""
    if passed:
        return "PASSED"
    else:
        return "FAILED"

class CustomTestResult(unittest.TestResult):
    """
        Custom Test Result

        This class overrides unittest default output style to enhance traceability of the failure,
        specifically with regard to preserving failure output in relation to the test name.
    """
    #pylint: disable=W0201
    #pylint: disable=W0212

    def __init__(self, stream, descriptions, verbosity):
        super_class = super(CustomTestResult, self)
        super_class.__init__(stream, descriptions, verbosity)

        self.tests_passed = 0
        self.tests_failed = 0
        self.testsRun = 0
        self.failed_tests = []
        self.last_test_class = ""

    def handle_result(self, test, passed):
        """Format the result string"""
        test_name = "{}.{}".format(type(test).__name__, test._testMethodName)
        if passed:
            self.tests_passed += 1
        else:
            self.tests_failed += 1
            self.failed_tests.append(test_name)
        print("{} | {}".format(get_test_result(passed), test._testMethodName))

    def print_double_separator(self, test_class):
        """Print a double-line separator for the given test class"""
        print("========" + "=" * (len(test_class) + 1))

    def print_last_test_name(self):
        """Print the last test name and how long it took"""
        if self.last_test_class != "":
            self.print_double_separator(self.last_test_class)
            stop_time = time.perf_counter() - self.test_start_time
            print("  END  | {} ({:0.3f}s)".format(self.last_test_class, stop_time))

    def addError(self, test, err):
        """Print error text"""
        print(self._exc_info_to_string(err, test))
        self.handle_result(test, False)

    def addFailure(self, test, err):
        """Add a test failure"""
        print(self._exc_info_to_string(err, test))
        self.handle_result(test, False)

    def addSuccess(self, test):
        """Explicitly report success"""
        self.handle_result(test, True)

    def startTest(self, test):
        """Start the test and print header information"""
        self.testsRun += 1
        test_class = type(test).__name__
        if self.last_test_class != test_class:
            self.print_last_test_name()

            self.last_test_class = test_class
            self.test_start_time = time.perf_counter()
            print("\n BEGIN | {}".format(test_class))
            self.print_double_separator(test_class)
        print("RUN    | {}".format(test._testMethodName))

    def stopTestRun(self):
        """Override normal output and do nothing"""
        pass

    def printErrors(self):
        """Print test summary with aggregate error information"""
        pct = 0
        if self.testsRun > 0:
            pct = int(self.tests_passed * 100 / self.testsRun)
        self.print_last_test_name()
        print("\nSUMMARY:")
        print(
            "{}/{}/{} {}% (pass/fail/total)".format(
                self.tests_passed,
                self.tests_failed,
                self.testsRun,
                pct
            ))
        if self.failed_tests:
            print("\nERRORS:")
            for err in self.failed_tests:
                print(err)

    def wasSuccessful(self):
        return self.tests_failed == 0

loader = unittest.TestLoader()
suite = unittest.TestSuite()

test_list = get_tests()
if len(sys.argv) <= 1:
    match_expresions = [".*"]
else:
    match_expresions = sys.argv[1:]

suite = unittest.TestSuite()
test_inst = dict()
add_tests_by_expressions(match_expresions, test_list)

runner = unittest.TextTestRunner()
runner.resultclass = CustomTestResult

# Very detailed errors
# Set to Log.LEVEL.EXTREME for even more info
Log.Logger.set_level(Log.LEVEL.DEBUG)

runner.run(suite)
